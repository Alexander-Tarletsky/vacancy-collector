[project]
name = "telegram-vacancy-collector"
description = "A service to collect messages (vacancies) from Telegram channels."
authors = [ { name = "Aleksandr Tarletskiy", email = "aleksandr.tarletsky@gmail.com" } ]
license = "MIT"
readme = "README.md"
dynamic = [ "version" ]
requires-python = ">=3.13.0"
dependencies = [
    "fastapi (>=0.115.0,<0.116.0)",
    "uvicorn[standard]>=0.29.0,<0.30.0",
    "telethon>=1.33.0,<2.0.0",
    "sqlalchemy>=2.0.29,<3.0.0",
    "asyncpg>=0.30.0,<0.31.0",
    "alembic>=1.13.1,<2.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "pydantic-settings>=2.7.1,<3.0.0",
    "jinja2>=3.1.6,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "bcrypt>=4.1.2,<5.0.0",
    "aiohttp>=3.9.3,<4.0.0",
    "mypy>=1.15.0,<2.0.0",
    "tenacity>=9.0.0,<10.0.0",
    "python-jose (>=3.4.0,<4.0.0)",
    "python-multipart (>=0.0.20,<0.0.21)",
    "pydantic[dotenv,mail,timezone] (>=2.10.6,<3.0.0)",
    "email-validator (>=2.2.0,<3.0.0)",
    "anyio (>=4.8.0,<5.0.0)",
]

[tool.poetry]
version = "0.1.0"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.13.0,<4.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
httpx = "^0.28.1"
black = "^25.1.0"
faker = "^37.0.0"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
coverage = "^7.6.12"
ruff = "^0.11.0"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
concurrency = ["greenlet"]
omit = ["app/tests/*"]
source = ["app"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.pytest.ini_options]
# Not working for some reason, so use pytest.ini
pythonpath = [".", "app"]
#addopts = "--no-header -vv -n auto --cov --cov-report xml --cov-report term-missing --cov-fail-under=100"
addopts = "-vv"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
testpaths = ["app/tests"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".python-version",
    "__pycache__",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "__init__.py",
]

# Same as Black.
line-length = 100
indent-width = 4

output-format = "grouped"

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
#select = ["E4", "E7", "E9", "F"]
select = [
    "W",
    "ARG",
    "ANN",
    "ASYNC",
    "B",
    "COM",
    "C4",
    "C90",
    "DTZ",
    "E",
    "ERA",
    "F",
    "UP",
    "T10",
    "T20",
    "Q",
    "S",
    "N",
    "YTT",
    "PTH",
]
ignore = [
#    "ANN101",
#    "ANN102",
    "ARG002",
    "Q000",
    "S101",
    "COM812",  # Missing trailing comma
    "N818",
    "ANN003",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]

[tool.ruff.lint.isort]
# Use a single line between direct and from import.
lines-between-types = 1
no-sections = false
order-by-type = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
